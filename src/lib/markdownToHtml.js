import { remark } from 'remark';
import html from 'remark-html';
import toc from 'remark-toc';
import slug from 'remark-slug';

function generateManualTOC(markdown) {
    const headings = markdown.match(/^#{1,2} .+$/gm) || [];
    if (headings.length < 3) {
        return ''; // Return empty string if less than 3 headings
    }
    const toc = headings.map(heading => {
        const level = heading.match(/^#+/)[0].length;
        const text = heading.replace(/^#+\s*/, '');
        const slug = text.toLowerCase().replace(/[^\w]+/g, '-');
        return `<li class="toc-level-${level}"><a href="#${slug}">${text}</a></li>`;
    }).join('');
    return `<nav class="toc"><h2 class="h5 fw-normal">Table of contents</h2><ul>${toc}</ul></nav>`;
}

function addLinkIconToHeadings(htmlContent) {
    const headingRegex = /<h([1-6])\s+id="([^"]+)"([^>]*)>(.+?)<\/h\1>/g;
    return htmlContent.replace(headingRegex, (match, level, id, attrs, content) => {
        const linkIcon = `
      <a href="#${id}" class="heading-link d-none d-md-inline-block" aria-hidden="true">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-link-45deg" viewBox="0 0 16 16">
          <path d="M4.715 6.542 3.343 7.914a3 3 0 1 0 4.243 4.243l1.828-1.829A3 3 0 0 0 8.586 5.5L8 6.086a1.002 1.002 0 0 0-.154.199 2 2 0 0 1 .861 3.337L6.88 11.45a2 2 0 1 1-2.83-2.83l.793-.792a4.018 4.018 0 0 1-.128-1.287z"/>
          <path d="M6.586 4.672A3 3 0 0 0 7.414 9.5l.775-.776a2 2 0 0 1-.896-3.346L9.12 3.55a2 2 0 1 1 2.83 2.83l-.793.792c.112.42.155.855.128 1.287l1.372-1.372a3 3 0 1 0-4.243-4.243L6.586 4.672z"/>
        </svg>
      </a>
    `;
        return `<h${level} id="${id}"${attrs}>${linkIcon} ${content}</h${level}>`;
    });
}

export default async function markdownToHtml(markdown) {
    try {
        // console.log('Input Markdown:', markdown.slice(0, 500) + '...');
        // Count headings
        const headings = markdown.match(/^#{1,3} .+$/gm) || [];
        const headingCount = headings.length;

        // Process markdown with slug and TOC
        const result = await remark()
            .use(slug)
            .use(toc, {
                heading: 'Table of contents',
                tight: true,
                ordered: false,
                maxDepth: 3,
            })
            .use(html, { sanitize: false })
            .process(markdown);

        let htmlContent = result.toString();

        // Extract TOC
        let tocHtml = '';
        const tocRegex = /<nav\s+class="toc"[\s\S]*?<\/nav>/i;
        const tocMatch = htmlContent.match(tocRegex);

        if (tocMatch && headingCount >= 3) {
            // console.log('TOC found in HTML generated by remark-toc');
            tocHtml = tocMatch[0];
            // Remove TOC from main content
            htmlContent = htmlContent.replace(tocHtml, '');
        } else if (headingCount >= 3) {
            // console.log('Using manually generated TOC');
            tocHtml = generateManualTOC(markdown);
        } else {
            console.log('Less than 3 headings, no TOC generated');
        }

        // Add link icons to headings
        const contentHtml = addLinkIconToHeadings(htmlContent);

        // console.log('TOC HTML:', tocHtml);
        // console.log('Content HTML length:', contentHtml.length);

        return { tocHtml, contentHtml };
    } catch (error) {
        console.error('Error processing markdown:', error);
        // Fallback to manual TOC generation and basic HTML conversion
        const tocHtml = generateManualTOC(markdown);
        const contentHtml = addLinkIconToHeadings(`<div>${markdown.replace(/\n/g, '<br>')}</div>`);
        return { tocHtml, contentHtml };
    }
}